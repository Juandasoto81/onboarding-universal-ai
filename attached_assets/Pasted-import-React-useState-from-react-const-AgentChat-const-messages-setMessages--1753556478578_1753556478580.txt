import React, { useState } from 'react';

const AgentChat = () => {
  const [messages, setMessages] = useState([
    { from: 'bot', text: 'üëã Hola, soy tu asistente virtual. ¬øEn qu√© idioma prefieres continuar?' }
  ]);
  const [input, setInput] = useState('');
  const [step, setStep] = useState('language'); // Paso actual
  const [userData, setUserData] = useState({});

  const sendMessage = () => {
    const trimmed = input.trim();
    if (!trimmed) return;

    setMessages([...messages, { from: 'user', text: trimmed }]);
    setInput('');

    setTimeout(() => {
      handleStep(trimmed);
    }, 500);
  };

  const handleStep = (value) => {
    switch (step) {
      case 'language':
        setMessages((prev) => [
          ...prev,
          { from: 'bot', text: '‚úÖ Perfecto. Empecemos con tu nombre completo.' }
        ]);
        setStep('name');
        break;

      case 'name':
        setUserData((prev) => ({ ...prev, name: value }));
        setMessages((prev) => [
          ...prev,
          { from: 'bot', text: `Gracias, ${value}. ¬øCu√°l es tu correo electr√≥nico?` }
        ]);
        setStep('email');
        break;

      case 'email':
        setUserData((prev) => ({ ...prev, email: value }));
        // Aqu√≠ simulamos env√≠o OTP
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        localStorage.setItem('mockOTP', otp); // Para simular
        setMessages((prev) => [
          ...prev,
          { from: 'bot', text: `üì® Te envi√© un c√≥digo OTP a ${value} (simulado: ${otp}). Escr√≠belo aqu√≠ para continuar.` }
        ]);
        setStep('otp');
        break;

      case 'otp':
        const correctOTP = localStorage.getItem('mockOTP');
        if (value === correctOTP) {
          setMessages((prev) => [
            ...prev,
            { from: 'bot', text: '‚úÖ Verificaci√≥n completada. ¬°Bienvenido!' }
          ]);
          setStep('done');
        } else {
          setMessages((prev) => [
            ...prev,
            { from: 'bot', text: '‚ùå C√≥digo incorrecto. Intenta nuevamente.' }
          ]);
        }
        break;

      default:
        break;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="h-96 overflow-y-auto p-4 space-y-2">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`p-3 rounded-lg text-sm ${
                msg.from === 'bot'
                  ? 'bg-blue-100 text-blue-800 self-start'
                  : 'bg-green-100 text-green-800 self-end'
              }`}
            >
              {msg.text}
            </div>
          ))}
        </div>
        {step !== 'done' && (
          <div className="flex p-3 border-t">
            <input
              className="flex-1 border border-gray-300 rounded-lg px-3 py-2 mr-2 text-sm"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Escribe aqu√≠..."
            />
            <button
              className="bg-blue-600 text-white px-4 py-2 rounded-lg text-sm"
              onClick={sendMessage}
            >
              Enviar
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default AgentChat;
